
USARTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000de8  08000de8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000000e8  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000f8  200000f8  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000036eb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a84  00000000  00000000  0002372b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000480  00000000  00000000  000241b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000408  00000000  00000000  00024630  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001bc2  00000000  00000000  00024a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001b81  00000000  00000000  000265fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002817b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000118c  00000000  00000000  000281f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00029384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d4c 	.word	0x08000d4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000d4c 	.word	0x08000d4c

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	887a      	ldrh	r2, [r7, #2]
 80003fc:	819a      	strh	r2, [r3, #12]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800040a:	b480      	push	{r7}
 800040c:	b085      	sub	sp, #20
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	891b      	ldrh	r3, [r3, #8]
 800041e:	b29a      	uxth	r2, r3
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	4013      	ands	r3, r2
 8000424:	b29b      	uxth	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d002      	beq.n	8000430 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800042a:	2301      	movs	r3, #1
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e001      	b.n	8000434 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b38      	ldr	r3, [pc, #224]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4610      	mov	r0, r2
 8000454:	f7ff ff60 	bl	8000318 <DMA_GetFlagStatus>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d064      	beq.n	8000528 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d04c      	beq.n	8000500 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000466:	bf00      	nop
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff3b 	bl	80002e8 <DMA_GetCmdStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f7      	bne.n	8000468 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	4610      	mov	r0, r2
 8000484:	f7ff ff84 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 8000490:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	4293      	cmp	r3, r2
 800049c:	bf28      	it	cs
 800049e:	4613      	movcs	r3, r2
 80004a0:	4a26      	ldr	r2, [pc, #152]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004a2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4924      	ldr	r1, [pc, #144]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fea8 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fefa 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c8:	d203      	bcs.n	80004d2 <Audio_MAL_IRQHandler+0x8e>
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	e000      	b.n	80004d4 <Audio_MAL_IRQHandler+0x90>
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <Audio_MAL_IRQHandler+0xfc>)
 80004d4:	4413      	add	r3, r2
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004d8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e6:	428b      	cmp	r3, r1
 80004e8:	bf28      	it	cs
 80004ea:	460b      	movcs	r3, r1
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004f0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fed9 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80004fe:	e013      	b.n	8000528 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fed2 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f7ff ff3a 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fad0 	bl	8000ac8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000008 	.word	0x20000008
 8000530:	2000000c 	.word	0x2000000c
 8000534:	20000000 	.word	0x20000000
 8000538:	2000002c 	.word	0x2000002c
 800053c:	2000006c 	.word	0x2000006c
 8000540:	0001fffe 	.word	0x0001fffe

08000544 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000548:	f7ff ff7c 	bl	8000444 <Audio_MAL_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000554:	f7ff ff76 	bl	8000444 <Audio_MAL_IRQHandler>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000560:	2102      	movs	r1, #2
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <SPI3_IRQHandler+0x3c>)
 8000564:	f7ff ff51 	bl	800040a <SPI_I2S_GetFlagStatus>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d011      	beq.n	8000592 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SPI3_IRQHandler+0x40>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d106      	bne.n	8000584 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000576:	f000 fab2 	bl	8000ade <EVAL_AUDIO_GetSampleCallBack>
 800057a:	4603      	mov	r3, r0
 800057c:	4619      	mov	r1, r3
 800057e:	2004      	movs	r0, #4
 8000580:	f7ff fe22 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000584:	f000 faab 	bl	8000ade <EVAL_AUDIO_GetSampleCallBack>
 8000588:	4603      	mov	r3, r0
 800058a:	4619      	mov	r1, r3
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <SPI3_IRQHandler+0x3c>)
 800058e:	f7ff ff2d 	bl	80003ec <SPI_I2S_SendData>
  }
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40003c00 	.word	0x40003c00
 800059c:	20000004 	.word	0x20000004

080005a0 <delayy>:
char tx_buffer[50];

int i = 0;

void delayy(uint32_t time)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	while(time--);
 80005a8:	bf00      	nop
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <delayy+0xa>
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <GPIO_Config>:


void GPIO_Config()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 3);											// Enable clock for GPIOD and Configure PD12 in output mode +
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <GPIO_Config+0x34>)
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <GPIO_Config+0x34>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (1 << 24) | (1 << 26)  |  (1 << 28) | (1 << 30);	// Port D -> Pin 12 | Pin 13 | Pin 14 | Pin 15 Output selected +
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <GPIO_Config+0x38>)
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <GPIO_Config+0x38>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80005da:	6013      	str	r3, [r2, #0]

	GPIOD->OSPEEDR |= (2 << 24) | (2 << 26)  |  (2 << 28) | (2 << 30);	// High Speed
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <GPIO_Config+0x38>)
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <GPIO_Config+0x38>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 80005e6:	6093      	str	r3, [r2, #8]
	//GPIOD->PUPDR |= (2 << 24) | (2 << 26)  |  (2 << 28) | (2 << 30);	// Pull Down Mode
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020c00 	.word	0x40020c00

080005fc <RCC_Config>:


void RCC_Config()
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000;	// HSEON enable
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <RCC_Config+0x8c>)
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <RCC_Config+0x8c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800060a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));	// HSEON Ready Flag wait
 800060c:	bf00      	nop
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <RCC_Config+0x8c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <RCC_Config+0x12>
	RCC->CR |= 0x00080000;	// CSS Enable
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <RCC_Config+0x8c>)
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <RCC_Config+0x8c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000624:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x01000000;	// PLL on
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <RCC_Config+0x8c>)
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <RCC_Config+0x8c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000630:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;	// PLL M = 4
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <RCC_Config+0x8c>)
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <RCC_Config+0x8c>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;	// Pll N = 168
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <RCC_Config+0x8c>)
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <RCC_Config+0x8c>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000648:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;	// PLL p = 2
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <RCC_Config+0x8c>)
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <RCC_Config+0x8c>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;	// AHB Prescaler = 1
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <RCC_Config+0x8c>)
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <RCC_Config+0x8c>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;	// APB2 Prescaler = 2
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <RCC_Config+0x8c>)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <RCC_Config+0x8c>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000664:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;	// APB1 Prescaler = 4
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <RCC_Config+0x8c>)
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <RCC_Config+0x8c>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000670:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00800000;		// CSS Flag clear
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <RCC_Config+0x8c>)
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <RCC_Config+0x8c>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800067c:	60d3      	str	r3, [r2, #12]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40023800 	.word	0x40023800

0800068c <Uart2Config>:

void Uart2Config (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	6. Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register

	********************************/

	// 1. Enable the UART CLOCK and GPIO CLOCK
	RCC->APB1ENR |= (1<<17);  // Enable UART2 CLOCK
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <Uart2Config+0xb0>)
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <Uart2Config+0xb0>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1<<0); // Enable GPIOA CLOCK
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <Uart2Config+0xb0>)
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <Uart2Config+0xb0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30

	// 2. Configure the UART PINs for ALternate Functions
	GPIOA->MODER |= (2<<4);  // Bits (5:4)= 1:0 --> Alternate Function for Pin PA2
 80006a8:	4a25      	ldr	r2, [pc, #148]	; (8000740 <Uart2Config+0xb4>)
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <Uart2Config+0xb4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<6);  // Bits (7:6)= 1:0 --> Alternate Function for Pin PA3
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <Uart2Config+0xb4>)
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <Uart2Config+0xb4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006be:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3<<4) | (3<<6);  // Bits (5:4)= 1:1 and Bits (7:6)= 1:1 --> High Speed for PIN PA2 and PA3
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <Uart2Config+0xb4>)
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <Uart2Config+0xb4>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80006ca:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= (7<<8);  // Bytes (11:10:9:8) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA2
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <Uart2Config+0xb4>)
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <Uart2Config+0xb4>)
 80006d0:	6a1b      	ldr	r3, [r3, #32]
 80006d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7<<12); // Bytes (15:14:13:12) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA3
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <Uart2Config+0xb4>)
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <Uart2Config+0xb4>)
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80006e2:	6213      	str	r3, [r2, #32]

	// 3. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USART2->CR1 = 0x00;  // clear all
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <Uart2Config+0xb8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= (1<<13);  // UE = 1... Enable USART
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <Uart2Config+0xb8>)
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <Uart2Config+0xb8>)
 80006ee:	899b      	ldrh	r3, [r3, #12]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	8193      	strh	r3, [r2, #12]

	// 4. Program the M bit in USART_CR1 to define the word length.
	USART2->CR1 &= ~(1<<12);  // M =0; 8 bit word length
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <Uart2Config+0xb8>)
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <Uart2Config+0xb8>)
 80006fe:	899b      	ldrh	r3, [r3, #12]
 8000700:	b29b      	uxth	r3, r3
 8000702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000706:	b29b      	uxth	r3, r3
 8000708:	8193      	strh	r3, [r2, #12]

	// 5. Select the desired baud rate using the USART_BRR register.
	//USART2->BRR = (7<<0) | (24<<4);   // Baud rate of 115200, PCLK1 at 45MHz
	USART2->BRR = 0x1112;			// Baud Rate 9600
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <Uart2Config+0xb8>)
 800070c:	f241 1212 	movw	r2, #4370	; 0x1112
 8000710:	811a      	strh	r2, [r3, #8]

	// 6. Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register
	USART2->CR1 |= (1<<2); // RE=1.. Enable the Receiver
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <Uart2Config+0xb8>)
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <Uart2Config+0xb8>)
 8000716:	899b      	ldrh	r3, [r3, #12]
 8000718:	b29b      	uxth	r3, r3
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	b29b      	uxth	r3, r3
 8000720:	8193      	strh	r3, [r2, #12]
	USART2->CR1 |= (1<<3);  // TE=1.. Enable Transmitter
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <Uart2Config+0xb8>)
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <Uart2Config+0xb8>)
 8000726:	899b      	ldrh	r3, [r3, #12]
 8000728:	b29b      	uxth	r3, r3
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	8193      	strh	r3, [r2, #12]
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	40004400 	.word	0x40004400

08000748 <UART2_SendChar>:


void UART2_SendChar (uint8_t c)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]

	USART2->DR = c; 			      	 // load the data into DR register
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <UART2_SendChar+0x30>)
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	b292      	uxth	r2, r2
 8000758:	809a      	strh	r2, [r3, #4]
	while (!(USART2->SR & (1<<6)));  	// Wait for TC to SET.. This indicates that the data has been transmitted
 800075a:	bf00      	nop
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <UART2_SendChar+0x30>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f8      	beq.n	800075c <UART2_SendChar+0x14>
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40004400 	.word	0x40004400

0800077c <UART2_SendString>:

void UART2_SendString (char *string)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	while (*string) UART2_SendChar (*string++);
 8000784:	e006      	b.n	8000794 <UART2_SendString+0x18>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffda 	bl	8000748 <UART2_SendChar>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f4      	bne.n	8000786 <UART2_SendString+0xa>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <assign_the_data>:


void assign_the_data(char *buffer)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    char* ptr;
    ptr = &buffer[0];
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60bb      	str	r3, [r7, #8]

    for(int i=0; i<20; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	e018      	b.n	80007e8 <assign_the_data+0x44>
    {
    	while (!(USART2->SR & (1<<5)));
 80007b6:	bf00      	nop
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <assign_the_data+0x58>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <assign_the_data+0x14>
        *(ptr+i) = USART2->DR;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <assign_the_data+0x58>)
 80007ce:	8892      	ldrh	r2, [r2, #4]
 80007d0:	b292      	uxth	r2, r2
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	701a      	strb	r2, [r3, #0]

        if(*(ptr+i) == '\n')
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d006      	beq.n	80007f0 <assign_the_data+0x4c>
    for(int i=0; i<20; i++)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b13      	cmp	r3, #19
 80007ec:	dde3      	ble.n	80007b6 <assign_the_data+0x12>
 80007ee:	e000      	b.n	80007f2 <assign_the_data+0x4e>
        	return;
 80007f0:	bf00      	nop
    }
}
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40004400 	.word	0x40004400

08000800 <main>:


int main (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	RCC_Config();
 8000804:	f7ff fefa 	bl	80005fc <RCC_Config>
	Uart2Config ();
 8000808:	f7ff ff40 	bl	800068c <Uart2Config>
	GPIO_Config();
 800080c:	f7ff fed8 	bl	80005c0 <GPIO_Config>


	while (1)
	{
		assign_the_data(rx_buffer);
 8000810:	488a      	ldr	r0, [pc, #552]	; (8000a3c <main+0x23c>)
 8000812:	f7ff ffc7 	bl	80007a4 <assign_the_data>


		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '1' && rx_buffer[4] == ' ' &&
 8000816:	4b89      	ldr	r3, [pc, #548]	; (8000a3c <main+0x23c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b6c      	cmp	r3, #108	; 0x6c
 800081c:	d121      	bne.n	8000862 <main+0x62>
 800081e:	4b87      	ldr	r3, [pc, #540]	; (8000a3c <main+0x23c>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	2b65      	cmp	r3, #101	; 0x65
 8000824:	d11d      	bne.n	8000862 <main+0x62>
 8000826:	4b85      	ldr	r3, [pc, #532]	; (8000a3c <main+0x23c>)
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	2b64      	cmp	r3, #100	; 0x64
 800082c:	d119      	bne.n	8000862 <main+0x62>
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <main+0x23c>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	2b31      	cmp	r3, #49	; 0x31
 8000834:	d115      	bne.n	8000862 <main+0x62>
 8000836:	4b81      	ldr	r3, [pc, #516]	; (8000a3c <main+0x23c>)
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b20      	cmp	r3, #32
 800083c:	d111      	bne.n	8000862 <main+0x62>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 800083e:	4b7f      	ldr	r3, [pc, #508]	; (8000a3c <main+0x23c>)
 8000840:	795b      	ldrb	r3, [r3, #5]
		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '1' && rx_buffer[4] == ' ' &&
 8000842:	2b6f      	cmp	r3, #111	; 0x6f
 8000844:	d10d      	bne.n	8000862 <main+0x62>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 8000846:	4b7d      	ldr	r3, [pc, #500]	; (8000a3c <main+0x23c>)
 8000848:	799b      	ldrb	r3, [r3, #6]
 800084a:	2b6e      	cmp	r3, #110	; 0x6e
 800084c:	d109      	bne.n	8000862 <main+0x62>
		{
			GPIOD->ODR |= (1 << 12);
 800084e:	4a7c      	ldr	r2, [pc, #496]	; (8000a40 <main+0x240>)
 8000850:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <main+0x240>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000858:	6153      	str	r3, [r2, #20]
			UART2_SendString("led1 is on.\n");
 800085a:	487a      	ldr	r0, [pc, #488]	; (8000a44 <main+0x244>)
 800085c:	f7ff ff8e 	bl	800077c <UART2_SendString>
 8000860:	e028      	b.n	80008b4 <main+0xb4>
		}

		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '1' && rx_buffer[4] == ' ' &&
 8000862:	4b76      	ldr	r3, [pc, #472]	; (8000a3c <main+0x23c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b6c      	cmp	r3, #108	; 0x6c
 8000868:	d124      	bne.n	80008b4 <main+0xb4>
 800086a:	4b74      	ldr	r3, [pc, #464]	; (8000a3c <main+0x23c>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b65      	cmp	r3, #101	; 0x65
 8000870:	d120      	bne.n	80008b4 <main+0xb4>
 8000872:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <main+0x23c>)
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d11c      	bne.n	80008b4 <main+0xb4>
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <main+0x23c>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	2b31      	cmp	r3, #49	; 0x31
 8000880:	d118      	bne.n	80008b4 <main+0xb4>
 8000882:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <main+0x23c>)
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	2b20      	cmp	r3, #32
 8000888:	d114      	bne.n	80008b4 <main+0xb4>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 800088a:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <main+0x23c>)
 800088c:	795b      	ldrb	r3, [r3, #5]
		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '1' && rx_buffer[4] == ' ' &&
 800088e:	2b6f      	cmp	r3, #111	; 0x6f
 8000890:	d110      	bne.n	80008b4 <main+0xb4>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 8000892:	4b6a      	ldr	r3, [pc, #424]	; (8000a3c <main+0x23c>)
 8000894:	799b      	ldrb	r3, [r3, #6]
 8000896:	2b66      	cmp	r3, #102	; 0x66
 8000898:	d10c      	bne.n	80008b4 <main+0xb4>
 800089a:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <main+0x23c>)
 800089c:	79db      	ldrb	r3, [r3, #7]
 800089e:	2b66      	cmp	r3, #102	; 0x66
 80008a0:	d108      	bne.n	80008b4 <main+0xb4>
		{
			GPIOD->ODR &= ~(1 << 12);
 80008a2:	4a67      	ldr	r2, [pc, #412]	; (8000a40 <main+0x240>)
 80008a4:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <main+0x240>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ac:	6153      	str	r3, [r2, #20]
			UART2_SendString("led1 is off.\n");
 80008ae:	4866      	ldr	r0, [pc, #408]	; (8000a48 <main+0x248>)
 80008b0:	f7ff ff64 	bl	800077c <UART2_SendString>
		}

		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '2' && rx_buffer[4] == ' ' &&
 80008b4:	4b61      	ldr	r3, [pc, #388]	; (8000a3c <main+0x23c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b6c      	cmp	r3, #108	; 0x6c
 80008ba:	d121      	bne.n	8000900 <main+0x100>
 80008bc:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <main+0x23c>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	2b65      	cmp	r3, #101	; 0x65
 80008c2:	d11d      	bne.n	8000900 <main+0x100>
 80008c4:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <main+0x23c>)
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b64      	cmp	r3, #100	; 0x64
 80008ca:	d119      	bne.n	8000900 <main+0x100>
 80008cc:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <main+0x23c>)
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	2b32      	cmp	r3, #50	; 0x32
 80008d2:	d115      	bne.n	8000900 <main+0x100>
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <main+0x23c>)
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b20      	cmp	r3, #32
 80008da:	d111      	bne.n	8000900 <main+0x100>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 80008dc:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <main+0x23c>)
 80008de:	795b      	ldrb	r3, [r3, #5]
		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '2' && rx_buffer[4] == ' ' &&
 80008e0:	2b6f      	cmp	r3, #111	; 0x6f
 80008e2:	d10d      	bne.n	8000900 <main+0x100>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <main+0x23c>)
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	2b6e      	cmp	r3, #110	; 0x6e
 80008ea:	d109      	bne.n	8000900 <main+0x100>
		{
			GPIOD->ODR |= (1 << 13);
 80008ec:	4a54      	ldr	r2, [pc, #336]	; (8000a40 <main+0x240>)
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <main+0x240>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f6:	6153      	str	r3, [r2, #20]
			UART2_SendString("led2 is on.\n");
 80008f8:	4854      	ldr	r0, [pc, #336]	; (8000a4c <main+0x24c>)
 80008fa:	f7ff ff3f 	bl	800077c <UART2_SendString>
 80008fe:	e028      	b.n	8000952 <main+0x152>
		}

		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '2' && rx_buffer[4] == ' ' &&
 8000900:	4b4e      	ldr	r3, [pc, #312]	; (8000a3c <main+0x23c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b6c      	cmp	r3, #108	; 0x6c
 8000906:	d124      	bne.n	8000952 <main+0x152>
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <main+0x23c>)
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	2b65      	cmp	r3, #101	; 0x65
 800090e:	d120      	bne.n	8000952 <main+0x152>
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <main+0x23c>)
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	2b64      	cmp	r3, #100	; 0x64
 8000916:	d11c      	bne.n	8000952 <main+0x152>
 8000918:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <main+0x23c>)
 800091a:	78db      	ldrb	r3, [r3, #3]
 800091c:	2b32      	cmp	r3, #50	; 0x32
 800091e:	d118      	bne.n	8000952 <main+0x152>
 8000920:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <main+0x23c>)
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	2b20      	cmp	r3, #32
 8000926:	d114      	bne.n	8000952 <main+0x152>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 8000928:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <main+0x23c>)
 800092a:	795b      	ldrb	r3, [r3, #5]
		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '2' && rx_buffer[4] == ' ' &&
 800092c:	2b6f      	cmp	r3, #111	; 0x6f
 800092e:	d110      	bne.n	8000952 <main+0x152>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <main+0x23c>)
 8000932:	799b      	ldrb	r3, [r3, #6]
 8000934:	2b66      	cmp	r3, #102	; 0x66
 8000936:	d10c      	bne.n	8000952 <main+0x152>
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <main+0x23c>)
 800093a:	79db      	ldrb	r3, [r3, #7]
 800093c:	2b66      	cmp	r3, #102	; 0x66
 800093e:	d108      	bne.n	8000952 <main+0x152>
		{
			GPIOD->ODR &= ~(1 << 13);
 8000940:	4a3f      	ldr	r2, [pc, #252]	; (8000a40 <main+0x240>)
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <main+0x240>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800094a:	6153      	str	r3, [r2, #20]
			UART2_SendString("led2 is off.\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <main+0x250>)
 800094e:	f7ff ff15 	bl	800077c <UART2_SendString>
		}

		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '3' && rx_buffer[4] == ' ' &&
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <main+0x23c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b6c      	cmp	r3, #108	; 0x6c
 8000958:	d121      	bne.n	800099e <main+0x19e>
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <main+0x23c>)
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	2b65      	cmp	r3, #101	; 0x65
 8000960:	d11d      	bne.n	800099e <main+0x19e>
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <main+0x23c>)
 8000964:	789b      	ldrb	r3, [r3, #2]
 8000966:	2b64      	cmp	r3, #100	; 0x64
 8000968:	d119      	bne.n	800099e <main+0x19e>
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <main+0x23c>)
 800096c:	78db      	ldrb	r3, [r3, #3]
 800096e:	2b33      	cmp	r3, #51	; 0x33
 8000970:	d115      	bne.n	800099e <main+0x19e>
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <main+0x23c>)
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	2b20      	cmp	r3, #32
 8000978:	d111      	bne.n	800099e <main+0x19e>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <main+0x23c>)
 800097c:	795b      	ldrb	r3, [r3, #5]
		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '3' && rx_buffer[4] == ' ' &&
 800097e:	2b6f      	cmp	r3, #111	; 0x6f
 8000980:	d10d      	bne.n	800099e <main+0x19e>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <main+0x23c>)
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	2b6e      	cmp	r3, #110	; 0x6e
 8000988:	d109      	bne.n	800099e <main+0x19e>
		{
			GPIOD->ODR |= (1 << 14);
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <main+0x240>)
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <main+0x240>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6153      	str	r3, [r2, #20]
			UART2_SendString("led3 is on.\n");
 8000996:	482f      	ldr	r0, [pc, #188]	; (8000a54 <main+0x254>)
 8000998:	f7ff fef0 	bl	800077c <UART2_SendString>
 800099c:	e028      	b.n	80009f0 <main+0x1f0>
		}

		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '3' && rx_buffer[4] == ' ' &&
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <main+0x23c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b6c      	cmp	r3, #108	; 0x6c
 80009a4:	d124      	bne.n	80009f0 <main+0x1f0>
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <main+0x23c>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	2b65      	cmp	r3, #101	; 0x65
 80009ac:	d120      	bne.n	80009f0 <main+0x1f0>
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <main+0x23c>)
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	2b64      	cmp	r3, #100	; 0x64
 80009b4:	d11c      	bne.n	80009f0 <main+0x1f0>
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <main+0x23c>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	2b33      	cmp	r3, #51	; 0x33
 80009bc:	d118      	bne.n	80009f0 <main+0x1f0>
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x23c>)
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	2b20      	cmp	r3, #32
 80009c4:	d114      	bne.n	80009f0 <main+0x1f0>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <main+0x23c>)
 80009c8:	795b      	ldrb	r3, [r3, #5]
		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '3' && rx_buffer[4] == ' ' &&
 80009ca:	2b6f      	cmp	r3, #111	; 0x6f
 80009cc:	d110      	bne.n	80009f0 <main+0x1f0>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <main+0x23c>)
 80009d0:	799b      	ldrb	r3, [r3, #6]
 80009d2:	2b66      	cmp	r3, #102	; 0x66
 80009d4:	d10c      	bne.n	80009f0 <main+0x1f0>
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <main+0x23c>)
 80009d8:	79db      	ldrb	r3, [r3, #7]
 80009da:	2b66      	cmp	r3, #102	; 0x66
 80009dc:	d108      	bne.n	80009f0 <main+0x1f0>
		{
			GPIOD->ODR &= ~(1 << 14);
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <main+0x240>)
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <main+0x240>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009e8:	6153      	str	r3, [r2, #20]
			UART2_SendString("led3 is off.\n");
 80009ea:	481b      	ldr	r0, [pc, #108]	; (8000a58 <main+0x258>)
 80009ec:	f7ff fec6 	bl	800077c <UART2_SendString>
		}

		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '4' && rx_buffer[4] == ' ' &&
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <main+0x23c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b6c      	cmp	r3, #108	; 0x6c
 80009f6:	d133      	bne.n	8000a60 <main+0x260>
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <main+0x23c>)
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	2b65      	cmp	r3, #101	; 0x65
 80009fe:	d12f      	bne.n	8000a60 <main+0x260>
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <main+0x23c>)
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	2b64      	cmp	r3, #100	; 0x64
 8000a06:	d12b      	bne.n	8000a60 <main+0x260>
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <main+0x23c>)
 8000a0a:	78db      	ldrb	r3, [r3, #3]
 8000a0c:	2b34      	cmp	r3, #52	; 0x34
 8000a0e:	d127      	bne.n	8000a60 <main+0x260>
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <main+0x23c>)
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	2b20      	cmp	r3, #32
 8000a16:	d123      	bne.n	8000a60 <main+0x260>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <main+0x23c>)
 8000a1a:	795b      	ldrb	r3, [r3, #5]
		if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '4' && rx_buffer[4] == ' ' &&
 8000a1c:	2b6f      	cmp	r3, #111	; 0x6f
 8000a1e:	d11f      	bne.n	8000a60 <main+0x260>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'n')
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <main+0x23c>)
 8000a22:	799b      	ldrb	r3, [r3, #6]
 8000a24:	2b6e      	cmp	r3, #110	; 0x6e
 8000a26:	d11b      	bne.n	8000a60 <main+0x260>
		{
			GPIOD->ODR |= (1 << 15);
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <main+0x240>)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <main+0x240>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a32:	6153      	str	r3, [r2, #20]
			UART2_SendString("led4 is on.\n");
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <main+0x25c>)
 8000a36:	f7ff fea1 	bl	800077c <UART2_SendString>
 8000a3a:	e03a      	b.n	8000ab2 <main+0x2b2>
 8000a3c:	200000a8 	.word	0x200000a8
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	08000d64 	.word	0x08000d64
 8000a48:	08000d74 	.word	0x08000d74
 8000a4c:	08000d84 	.word	0x08000d84
 8000a50:	08000d94 	.word	0x08000d94
 8000a54:	08000da4 	.word	0x08000da4
 8000a58:	08000db4 	.word	0x08000db4
 8000a5c:	08000dc4 	.word	0x08000dc4
		}

		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '4' && rx_buffer[4] == ' ' &&
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <main+0x2bc>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b6c      	cmp	r3, #108	; 0x6c
 8000a66:	d124      	bne.n	8000ab2 <main+0x2b2>
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <main+0x2bc>)
 8000a6a:	785b      	ldrb	r3, [r3, #1]
 8000a6c:	2b65      	cmp	r3, #101	; 0x65
 8000a6e:	d120      	bne.n	8000ab2 <main+0x2b2>
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <main+0x2bc>)
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	2b64      	cmp	r3, #100	; 0x64
 8000a76:	d11c      	bne.n	8000ab2 <main+0x2b2>
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <main+0x2bc>)
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	2b34      	cmp	r3, #52	; 0x34
 8000a7e:	d118      	bne.n	8000ab2 <main+0x2b2>
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x2bc>)
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	2b20      	cmp	r3, #32
 8000a86:	d114      	bne.n	8000ab2 <main+0x2b2>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <main+0x2bc>)
 8000a8a:	795b      	ldrb	r3, [r3, #5]
		else if(rx_buffer[0] == 'l' && rx_buffer[1] == 'e' && rx_buffer[2] == 'd' && rx_buffer[3] == '4' && rx_buffer[4] == ' ' &&
 8000a8c:	2b6f      	cmp	r3, #111	; 0x6f
 8000a8e:	d110      	bne.n	8000ab2 <main+0x2b2>
			rx_buffer[5] == 'o' && rx_buffer[6] == 'f' && rx_buffer[7] == 'f')
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <main+0x2bc>)
 8000a92:	799b      	ldrb	r3, [r3, #6]
 8000a94:	2b66      	cmp	r3, #102	; 0x66
 8000a96:	d10c      	bne.n	8000ab2 <main+0x2b2>
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <main+0x2bc>)
 8000a9a:	79db      	ldrb	r3, [r3, #7]
 8000a9c:	2b66      	cmp	r3, #102	; 0x66
 8000a9e:	d108      	bne.n	8000ab2 <main+0x2b2>
		{
			GPIOD->ODR &= ~(1 << 15);
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <main+0x2c0>)
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <main+0x2c0>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aaa:	6153      	str	r3, [r2, #20]
			UART2_SendString("led4 is off.\n");
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <main+0x2c4>)
 8000aae:	f7ff fe65 	bl	800077c <UART2_SendString>
		}

		delayy(1000);
 8000ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab6:	f7ff fd73 	bl	80005a0 <delayy>
		assign_the_data(rx_buffer);
 8000aba:	e6a9      	b.n	8000810 <main+0x10>
 8000abc:	200000a8 	.word	0x200000a8
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	08000dd4 	.word	0x08000dd4

08000ac8 <EVAL_AUDIO_TransferComplete_CallBack>:

	}
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000ad2:	bf00      	nop
}
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <EVAL_AUDIO_GetSampleCallBack>:


uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000af6:	e003      	b.n	8000b00 <LoopCopyDataInit>

08000af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000afe:	3104      	adds	r1, #4

08000b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b08:	d3f6      	bcc.n	8000af8 <CopyDataInit>
  ldr  r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b0c:	e002      	b.n	8000b14 <LoopFillZerobss>

08000b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b10:	f842 3b04 	str.w	r3, [r2], #4

08000b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b18:	d3f9      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f000 f841 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f000 f8f1 	bl	8000d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fe6d 	bl	8000800 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b2c:	08000dec 	.word	0x08000dec
  ldr  r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b34:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b38:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b3c:	200000f8 	.word	0x200000f8

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>

08000b42 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <HardFault_Handler+0x4>

08000b56 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <BusFault_Handler+0x4>

08000b62 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <SystemInit+0x60>)
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <SystemInit+0x60>)
 8000ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <SystemInit+0x64>)
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <SystemInit+0x64>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <SystemInit+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <SystemInit+0x64>)
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <SystemInit+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <SystemInit+0x64>)
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <SystemInit+0x68>)
 8000bda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <SystemInit+0x64>)
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <SystemInit+0x64>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000bee:	f000 f80d 	bl	8000c0c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf2:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <SystemInit+0x60>)
 8000bf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf8:	609a      	str	r2, [r3, #8]
#endif
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	24003010 	.word	0x24003010

08000c0c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c1a:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <SetSysClock+0xe8>)
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <SetSysClock+0xe8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <SetSysClock+0xe8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d103      	bne.n	8000c44 <SetSysClock+0x38>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c42:	d1f0      	bne.n	8000c26 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <SetSysClock+0xe8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c50:	2301      	movs	r3, #1
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	e001      	b.n	8000c5a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d142      	bne.n	8000ce6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c60:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <SetSysClock+0xe8>)
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <SetSysClock+0xe8>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000c6c:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <SetSysClock+0xec>)
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <SetSysClock+0xec>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c76:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c78:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <SetSysClock+0xe8>)
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <SetSysClock+0xe8>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SetSysClock+0xe8>)
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <SetSysClock+0xe8>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <SetSysClock+0xe8>)
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <SetSysClock+0xe8>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c96:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <SetSysClock+0xe8>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <SetSysClock+0xf0>)
 8000c9c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <SetSysClock+0xe8>)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <SetSysClock+0xe8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ca8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000caa:	bf00      	nop
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <SetSysClock+0xe8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f9      	beq.n	8000cac <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <SetSysClock+0xf4>)
 8000cba:	f240 6205 	movw	r2, #1541	; 0x605
 8000cbe:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <SetSysClock+0xe8>)
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <SetSysClock+0xe8>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <SetSysClock+0xe8>)
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <SetSysClock+0xe8>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000cd8:	bf00      	nop
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SetSysClock+0xe8>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d1f9      	bne.n	8000cda <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000
 8000cfc:	07405408 	.word	0x07405408
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <__libc_init_array>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4e0d      	ldr	r6, [pc, #52]	; (8000d3c <__libc_init_array+0x38>)
 8000d08:	4c0d      	ldr	r4, [pc, #52]	; (8000d40 <__libc_init_array+0x3c>)
 8000d0a:	1ba4      	subs	r4, r4, r6
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2500      	movs	r5, #0
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	d109      	bne.n	8000d28 <__libc_init_array+0x24>
 8000d14:	4e0b      	ldr	r6, [pc, #44]	; (8000d44 <__libc_init_array+0x40>)
 8000d16:	4c0c      	ldr	r4, [pc, #48]	; (8000d48 <__libc_init_array+0x44>)
 8000d18:	f000 f818 	bl	8000d4c <_init>
 8000d1c:	1ba4      	subs	r4, r4, r6
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	2500      	movs	r5, #0
 8000d22:	42a5      	cmp	r5, r4
 8000d24:	d105      	bne.n	8000d32 <__libc_init_array+0x2e>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d2c:	4798      	blx	r3
 8000d2e:	3501      	adds	r5, #1
 8000d30:	e7ee      	b.n	8000d10 <__libc_init_array+0xc>
 8000d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d36:	4798      	blx	r3
 8000d38:	3501      	adds	r5, #1
 8000d3a:	e7f2      	b.n	8000d22 <__libc_init_array+0x1e>
 8000d3c:	08000de4 	.word	0x08000de4
 8000d40:	08000de4 	.word	0x08000de4
 8000d44:	08000de4 	.word	0x08000de4
 8000d48:	08000de8 	.word	0x08000de8

08000d4c <_init>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	bf00      	nop
 8000d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d52:	bc08      	pop	{r3}
 8000d54:	469e      	mov	lr, r3
 8000d56:	4770      	bx	lr

08000d58 <_fini>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr
